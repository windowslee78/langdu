# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'langduui.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import sys
import re
import win32com.client
import threading
import time
import requests
from bs4 import BeautifulSoup


class UrlFetcher(QtCore.QThread):
    finished = QtCore.pyqtSignal(str)

    def __init__(self, url):
        super().__init__()
        self.url = url

    def run(self):
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}
            response = requests.get(self.url, headers=headers, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            # 移除包含代码的标签
            for tag in soup(['script', 'style', 'pre', 'code', 'iframe', 'noscript', 'svg', 'canvas']):
                tag.decompose()
            
            # 提取文本并清理
            text = soup.get_text(separator='\n')
            # 移除多余空行和空格
            # 移除JSON键值对和URL编码内容
            # 优先移除整个JSON对象和数组（支持多行）
            text = re.sub(r'\{[\s\S]*?\}', '', text, flags=re.DOTALL)
            text = re.sub(r'\[[\s\S]*?\]', '', text, flags=re.DOTALL)
            
            # 移除剩余的键值对（包括带引号和不带引号的形式）
            text = re.sub(r'"?\b(linkurl|views|isViewed|isNew|heat_score|hotTags|pre_tag|index|wd|sa|rsv_dl|from|cl|tn|fr|rsv_idx|hisfilter)"?\s*:\s*"?[^,;\n]+"?', '', text)
            
            # 移除URL和编码内容
            text = re.sub(r'https?://[^\s\n]+', '', text)
            text = re.sub(r'https?%3A%2F%2F[^\s\n]+', '', text)
            text = re.sub(r'%[0-9A-Fa-f]{2}', '', text)
            
            # 清理特殊字符和空白
            text = re.sub(r'[{}(),:"\[\]\|]', ' ', text)
            text = re.sub(r'\s{2,}', ' ', text)
            text = re.sub(r'\n\s+', '\n', text)
            text = re.sub(r'\s+\n', '\n', text)
            text = re.sub(r'\n+', '\n', text).strip()
            self.finished.emit(text)
        except requests.exceptions.RequestException as e:
            self.finished.emit(f"网络请求错误: {str(e)}")
        except Exception as e:
            self.finished.emit(f"处理错误: {str(e)}")

class Ui_Dialog(object):
    def __init__(self):
        # 初始化语音引擎
        self.engine = win32com.client.Dispatch("SAPI.SpVoice")
        self.reading_thread = None
        self.is_reading = False
        self.paused = False
        self.closed = False
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1056, 756)
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(10, 70, 851, 681))
        self.textEdit.setObjectName("textEdit")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(870, 10, 171, 51))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(870, 70, 171, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(870, 130, 171, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(870, 190, 171, 51))
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalSlider = QtWidgets.QSlider(Dialog)
        self.horizontalSlider.setGeometry(QtCore.QRect(870, 260, 171, 22))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setRange(-10, 10)
        self.horizontalSlider.setValue(0)
        self.horizontalSlider.valueChanged.connect(self.on_slider_value_changed)
        # 添加滑块值显示标签
        self.sliderValueLabel = QtWidgets.QLabel(Dialog)
        self.sliderValueLabel.setGeometry(QtCore.QRect(870, 290, 171, 20))
        self.sliderValueLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.sliderValueLabel.setObjectName("sliderValueLabel")
        self.sliderValueLabel.setText(str(self.horizontalSlider.value()))
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(10, 10, 851, 51))
        self.lineEdit.setObjectName("lineEdit")

        self.pushButton.clicked.connect(self.open_url)
        Dialog.closeEvent = self.closeEvent
        self.retranslateUi(Dialog)
        # 连接按钮事件
        self.pushButton_3.clicked.connect(self.start_reading)
        self.pushButton_4.clicked.connect(self.stop_reading)
        self.pushButton_2.clicked.connect(self.open_file_dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def open_url(self):
        url = self.lineEdit.text().strip()
        if not url:
            self.textEdit.setText("请输入URL地址")
            return
        if not url.startswith(('http://', 'https://')):
            url = 'http://' + url
        self.fetcher = UrlFetcher(url)
        self.fetcher.finished.connect(self.update_text_edit)
        self.fetcher.start()

    def update_text_edit(self, text):
        self.textEdit.setText(text)
    
    def closeEvent(self, event):
        # 标记为已关闭并停止所有线程
        self.closed = True
        self.stop_reading()
        
        # 等待线程结束
        if self.reading_thread and self.reading_thread.is_alive():
            self.reading_thread.join(timeout=2)  # 延长超时时间确保线程结束
        
        # 释放COM对象
        del self.engine
        
        event.accept()

    def open_file_dialog(self):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(None, "选择文本文件", "", "Text Files (*.txt);;All Files (*)", options=options)
        if file_path:
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                self.textEdit.setPlainText(content)




    def start_text_reading(self, text_list):
        if self.is_reading:
            return

        self.is_reading = True
        self.reading_thread = threading.Thread(target=self._read_text_list, args=(text_list,), daemon=True)
        self.reading_thread.start()

    def _read_text_list(self, text_list):
        for index, text in enumerate(text_list, 1):
            while self.paused and self.is_reading and not self.closed:
                time.sleep(0.1)
            if not self.is_reading or self.closed:
                break

            try:
                self.engine.Speak(text)
            except Exception as e:
                print(f"朗读错误: {str(e)}")
                continue

        self.is_reading = False
        self.paused = False

    def stop_reading(self):
        if self.is_reading:
            self.is_reading = False
            self.paused = False
            try:
                self.engine.Speak('', 2)  # 2 = SPCF_PURGEBEFORESPEAK
            except Exception as e:
                print(f"停止朗读时出错: {e}")

    def on_slider_value_changed(self, value):
        if hasattr(self.engine, 'Rate'):
            self.engine.Rate = value
        self.sliderValueLabel.setText(str(value))

    def start_reading(self):
        try:
            cursor = self.textEdit.textCursor()
            start_pos = cursor.position()
            full_text = self.textEdit.toPlainText()
            text = full_text[start_pos:].strip()
            punctuation = r'[。！？，；：“”‘’()\[\]{}、,;!?]'
            parts = re.split(punctuation, text)
            text_list = [part.strip() for part in parts if part.strip()]
            self.start_text_reading(text_list)
        except Exception as e:
            print(f"处理文本时发生错误: {str(e)}")

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "打开URL"))
        self.pushButton_2.setText(_translate("Dialog", "打开文件"))
        self.pushButton_3.setText(_translate("Dialog", "开始朗读"))
        self.pushButton_4.setText(_translate("Dialog", "停止朗读"))


if __name__ == "__main__":
    import sys
    import os
    import PyQt5
    os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = os.path.join(os.path.dirname(PyQt5.__file__), 'Qt5', 'plugins', 'platforms')

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
